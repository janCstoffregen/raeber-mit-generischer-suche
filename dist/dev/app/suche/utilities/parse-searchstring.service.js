"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ParseSearchstringService = (function () {
    function ParseSearchstringService() {
    }
    ParseSearchstringService.prototype.parseSearchString = function (unparsedSearch) {
        var quoteSplit = unparsedSearch.split('"');
        var queryWords = [];
        for (var i = 0; i < quoteSplit.length; i++) {
            if (i % 2 === 0 && quoteSplit[i] !== '') {
                var restWordSplit = quoteSplit[i].trim().split(' ');
                for (var j = 0; j < restWordSplit.length; j++) {
                    if (restWordSplit[j] === 'intitle:' || restWordSplit[j] === 'intext:' || restWordSplit[j] === 'OR') {
                        queryWords.push({ 'searchString': restWordSplit[j], 'where': 'open' });
                    }
                    else {
                        queryWords.push({ 'searchString': restWordSplit[j], 'where': 'anywhere' });
                    }
                }
            }
            else if (quoteSplit[i] !== '') {
                queryWords.push({ 'searchString': quoteSplit[i], 'where': 'anywhere' });
            }
        }
        for (var i = 0; i < queryWords.length; i++) {
            if (queryWords[i].searchString === 'intitle:' && queryWords[i].where === 'open' && queryWords[i + 1]) {
                queryWords[i].where = 'delete';
                queryWords[i + 1].where = 'title';
            }
            else if (queryWords[i].searchString === 'intitle:' && queryWords[i].where === 'open' && i === queryWords.length) {
                queryWords[i].where = 'anywhere';
            }
            else if (queryWords[i].searchString === 'intext:' && queryWords[i].where === 'open' && queryWords[i + 1]) {
                queryWords[i].where = 'delete';
                queryWords[i + 1].where = 'text';
            }
            else if (queryWords[i].searchString === 'intext:' && queryWords[i].where === 'open' && i === queryWords.length) {
                queryWords[i].where = 'anywhere';
            }
            else if (queryWords[i].searchString === 'OR' && queryWords[i].where === 'open' && i === 0) {
                queryWords[i].where = 'anywhere';
            }
            else if (queryWords[i].searchString === 'OR' && queryWords[i].where === 'open' && i === queryWords.length) {
                queryWords[i].where = 'anywhere';
            }
        }
        var queries = [];
        var queryEntry = [];
        for (var i = 0; i < queryWords.length; i++) {
            if (queryWords[i].searchString === 'OR' && queryWords[i].where === 'open' && i !== 0 && i !== queryWords.length) {
                queries.push(queryEntry);
                queryEntry = [];
            }
            else if (queryWords[i].where !== 'delete') {
                queryEntry.push({ 'searchString': queryWords[i].searchString, 'where': queryWords[i].where });
            }
        }
        queries.push(queryEntry);
        return queries;
    };
    return ParseSearchstringService;
}());
ParseSearchstringService = __decorate([
    core_1.Injectable()
], ParseSearchstringService);
exports.ParseSearchstringService = ParseSearchstringService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
